{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","work","useState","timerOn","setTimerState","timerType","setTimerType","seconds","setSeconds","minutes","setMinutes","weather","setWeather","timeRemaining","useRef","cycleCount","useEffect","navigator","geolocation","getCurrentPosition","position","fetch","coords","latitude","longitude","then","res","json","result","main","console","log","interval","setInterval","current","sec","Math","floor","min","document","getElementById","play","clearInterval","className","toReturn","displayTimer","onClick","id","src","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.38d29345.chunk.js","sourcesContent":["import React, {useState, useRef, useEffect} from 'react';\n\nconst api = {\n  key: \"607d41956edaca155b675cb8eabffdc7\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  const work = 1500;\n  const shortRest = 300;\n  const longRest = 900;\n\n  const [timerOn, setTimerState] = useState(false);\n  const [timerType, setTimerType] = useState(\"Work\");\n\n  const [seconds, setSeconds] = useState(0);\n  const [minutes, setMinutes] = useState(25);\n\n  const [weather, setWeather] = useState('');\n\n  var timeRemaining = useRef(work);\n  var cycleCount = useRef(0);\n\n  useEffect(function() {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(function(position) {\n        fetch(`${api.base}weather?lat=${position.coords.latitude}&lon=${position.coords.longitude}&units=imperial&APPID=${api.key}`)\n        .then(res => res.json())\n        .then((result) => {\n          setWeather(result.weather[0].main);\n          console.log(result.weather[0].main);\n        })\n        console.log(position.coords.latitude);\n        console.log(position.coords.longitude);\n      })\n    } else {\n      console.log(\"Allow access to location!\")\n    }\n  }, [timerType]);\n\n  useEffect(() => {\n    let interval = null;\n\n    if(timerOn) {\n      interval = setInterval(() => {\n        timeRemaining.current--;\n        \n        var sec = Math.floor(timeRemaining.current%60);\n        var min = Math.floor(timeRemaining.current/60);\n  \n        if(timeRemaining.current < 0){\n          setTimerState(false);\n          document.getElementById(\"alarm\").play();\n          \n          if(timerType === \"Work\"){\n\n            cycleCount.current++;\n\n            if(cycleCount.current%4 === 0){\n              setTimerType(\"Long Rest\");\n              timeRemaining.current = longRest;\n            } else {\n              setTimerType(\"Short Rest\");\n              timeRemaining.current = shortRest;\n            } \n\n          } else {\n            setTimerType(\"Work\");\n            timeRemaining.current = work;\n          }\n\n          sec = Math.floor(timeRemaining.current%60);\n          min = Math.floor(timeRemaining.current/60);\n        }\n\n        setSeconds(sec); \n        setMinutes(min);\n        \n      },1000);\n    } else {\n      clearInterval(interval);\n    }\n\n    return () => clearInterval(interval);\n  }, [timerOn, timerType]);\n\n  function resetTimer() {\n    setTimerState(false);\n    setSeconds(0);\n    setMinutes(25);\n    setTimerType(\"Work\");\n    cycleCount.current = 0;\n    timeRemaining.current = work;\n  }\n\n  function displayTimer() {\n\n    var toReturn = '';\n\n    if(minutes < 10){\n      toReturn += '0';\n    }\n\n    toReturn += minutes;\n    toReturn += ':';\n\n    if(seconds < 10){\n      toReturn += '0';\n    }\n\n    toReturn += seconds;\n\n    return toReturn;\n  }\n\n  function determineBackground() {\n    if(weather === \"Rain\" || weather === \"Drizzle\" || weather === \"Thunderstorm\") {\n      return \"app rainy\"\n    } else if(weather === \"Clear\") {\n      return \"app sunny\"\n    } else if(weather === \"Snow\") {\n      return \"app snowy\"\n    } else {\n      return \"app cloudy\"\n    }\n  }\n\n  return (\n    <div className={determineBackground()}>\n      <main>\n        <div className=\"timer-box\">\n          <h1 className=\"timer-style\">\n            {displayTimer()}\n          </h1>\n          <div className=\"title\">{timerType}</div>\n        </div>\n        <div className=\"button-layout\">\n          <button className=\"start\" onClick={() => setTimerState(true)}>\n            <div className=\"button-size\">Start</div>\n          </button>\n          <button className=\"stop\" onClick={() => setTimerState(false)}>\n            <div className=\"button-size\">Stop</div>\n          </button>\n          <button className=\"reset\" onClick={() => resetTimer()}>\n            <div className=\"button-size\">Reset</div>\n          </button>\n          <audio id=\"alarm\">\n            <source src=\"https://assets.coderrocketfuel.com/pomodoro-times-up.mp3\"></source>\n          </audio>\n        </div>\n      </main>\n    </div>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}